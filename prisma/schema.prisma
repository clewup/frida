generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]
  carts         Cart[]
  cartItems     CartItem[]
  orders        Order[]
  orderItems    OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  image         String
  price         Decimal
  stock         Int
  colour        Colour      @default(NA)
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  image         String
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  product    Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Cart {
  id    String     @id @default(cuid())
  items CartItem[]
  total Decimal

  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  email       String
  name        String
  status      OrderStatus @default(Pending)
  items       OrderItem[]
  total       Decimal
  transaction String      @unique

  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
  Refunded
  Returned
  Complete
}

enum Colour {
  White
  Black
  Gray
  Red
  Blue
  Green
  Yellow
  Orange
  Purple
  Pink
  Brown
  NA
}
