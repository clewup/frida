// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String

  name        String
  description String
  image       String
  price       Decimal
  stock       Int
  categories  Category[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String

  user  String     @unique
  items CartItem[]
  total Decimal
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String

  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String

  email       String
  name        String
  status      OrderStatus @default(Pending)
  items       OrderItem[]
  total       Decimal
  transaction String      @unique
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String

  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
  Refunded
  Returned
  Complete
}
